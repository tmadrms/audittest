openapi: '3.0.0'
info:
  version: 1.0.0
  title: api-error-handling-rl
  description: |-
    Standard definition for HTTP error responses and the problem-detail schema for common format of the error response body - as defined in the RFC7807 standard.
    APIs should import this API fragment to ensure standard consistency.
    The root main file of the API must include this "components" on it.
externalDocs:
  description: APIs Error Handling
  url: 'https://resolutionlife.atlassian.net/wiki/spaces/TDB/pages/268207638/APIs+Error+Handling'
paths: {}
components:
  schemas:
    ErrorType:
      description: Error Type data object schema.
      type: object
      required:
        - type
        - status
        - timestampUtc
      properties:
        type:
          description: |-
            A URI reference that identifies the problem type.
            This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type.
            When this member is not present, its value is assumed to be "about:blank"(see RFC 7807 reference for usage).
            Business error types and codes are referenced here.
            ACORD business types and codes will be used when applicable aka ResultInfoCode.
          type: string
          maxLength: 256
        title:
          description: |-
            Short, human-readable summary of the problemtype.
            It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation).
            When type equals about:blank then title should equal the description of the HTTP status code: should not change from occurrence to occurrence of the problem, so no timestamps/counters/etc title should not be parsed by a machine, it is only for meant for humans.
            A machine should use type instead.
          type: string
          maxLength: 256
        status:
          description: |-
            The HTTP status code generated by the origin server for this occurrence of the problem.
            Consumers can use the status member to determine what the original status code used by the generator was, in cases where it has been changed (e.g., by an intermediary or cache), and when message bodies persist without HTTP information.
            Generic HTTP software will still use the HTTP status code.
            For Business errors use status code of 4xx series, if in doubt use 400.
          type: integer
          format: int
          minimum: 100
          maximum: 599
        detail:
          description: |-
            A human-readable explanation is specific to this occurrence of the problem.
            The "detail" member, if present, ought to focus on helping the client correct the problem, rather than giving debugging information.
            Consumers SHOULD NOT parse the "detail" member for information; extensions are more suitable and less error-prone ways to obtain such information.
            Detail should not be parsed by a machine, it is only meant for humans.
          type: string
          maxLength: 65456
        instance:
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
          type: string
          maxLength: 65456
        timestampUtc:
          description: UTC timestamp at the point in time the error was first identified by the origin server. As defined by date-time - RFC3339.
          type: string
          format: date-time
        causes:
          description: List of ErrorType causes.
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ErrorType'
  responses:
    400:
      description: Bad request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/invalid-data'
            title: 'The things date of birth is not a valid date format'
            status: 400 
            instance: 'error/thing/invalid-data/date-of-birth'
            timestampUtc: '2017-07-21T17:32:28.23Z'
    401:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/unauthorized'
            title: 'Client is not authenticated'
            status: 401 
            timestampUtc: '2017-07-21T17:32:28.23Z'
    403:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/forbidden'
            title: 'Client does not have authority to invoke this operation'
            status: 403 
            timestampUtc: '2017-07-21T17:32:28.23Z'
    404:
      description: Not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/not-found'
            title: 'This thing was not found'
            status: 404
            timestampUtc: '2017-07-21T17:32:28.23Z'
    405:
      description: Method not allowed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/method-not-allowed'
            title: 'The method received in the request-line is known by the origin server but not supported by the target resource'
            status: 405
            timestampUtc: '2017-07-21T17:32:28.23Z'
    412:
      description: Precondition failed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/precondition-failed'
            title: 'One or more conditions given in the request header fields evaluated to false when tested on the server'
            status: 412
            timestampUtc: '2017-07-21T17:32:28.23Z'
    415:
      description: Unsupported media type
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/invalid-format'
            title: 'The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource'
            status: 415
            timestampUtc: '2017-07-21T17:32:28.23Z'
    422:
      description: Unprocessable entity
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/invalid-combination'
            title: 'Can not have a thing with no widget'
            instance: 'error/thing/invalid-combination/no-widget'
            status: 422
            timestampUtc: '2017-07-21T17:32:28.23Z'
    429:
      description: Too many requests 
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/too-many-requests'
            title: 'Too many concurrent API requests'
            status: 429
            timestampUtc: '2017-07-21T17:32:28.23Z'
    500:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/age-calculation'
            title: 'Error calculating things age'
            status: 500 
            instance: 'error/thing/age-calculation/divide-by-zero'
            timestampUtc: '2017-07-21T17:32:28.23Z'
    502:
      description: Bad gateway
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/bad-gateway'
            title: 'The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.'
            status: 502 
            timestampUtc: '2017-07-21T17:32:28.23Z'
    503:
      description: Service unavailable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/service-unavailable'
            title: 'The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay'
            status: 503 
            timestampUtc: '2017-07-21T17:32:28.23Z'
    504:
      description: Gateway timeout
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/gateway-timeout'
            title: 'The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request'
            status: 504 
            timestampUtc: '2017-07-21T17:32:28.23Z'
    508:
      description: Loop detected
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/loop-detected'
            title: 'The server terminated an operation because it encountered an infinite loop while processing a request with "Depth: infinity". This status indicates that the entire operation failed'
            status: 508
            timestampUtc: '2017-07-21T17:32:28.23Z'
    525:
      description: SSL handshake failed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/SSL-handshake-failed'
            title: 'The SSL handshake between a domain using Cloudflare and the origin web server failed.'
            status: 525 
            timestampUtc: '2017-07-21T17:32:28.23Z'

    default-error:
    # -- The generic response that will be returned in an error condition where no other defined error status applies
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorType'
          example:
            type: 'error/thing/unexpected-error'
            title: 'An unexpected error occured'
            status: 500 
            timestampUtc: '2017-07-21T17:32:28.23Z'